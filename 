use aoc2021;

// consider 1st, 2nd, i-th, ... bit. oxygen: let c be the most common bit from the list at that position (at tie, be 1). Keep those binary numbers which have c as the i -th position. If you only have 1 number remaining, you have found the oxygen. If not, continue i to the next bit position.
// same for co2 but with the least common bit. (at a tie, be 0)

fn main() {
    let input = aoc2021::read_input_file("3.txt");
    let input = input.as_bytes();
    let input: Vec<&[u8]> = input.split(|byte| byte == &b'\n').collect();
    let co2: u16 = calc_param(&input, least_common_method);
    let oxygen: u16 = calc_param(&input, most_common_method);
    let result = oxygen * co2;

    println!("{result}");
}

fn least_common_method(ones_minus_zeros: i16) -> u8 {
    if ones_minus_zeros <= 0 {
        0
    } else {
        1
    }
}

fn most_common_method(ones_minus_zeros: i16) -> u8 {
    if ones_minus_zeros >= 0 {
        1
    } else {
        0
    }
}

fn calc_param<F>(input: &[&[u8]], method: F) -> u16
where
    F: Fn(i16) -> u8,
{
    //go through the bit positions
    let positions = 0..input[0].len();
    let nums_len = input.len();
    for pos in positions {
        let ones_to_zeros = count_ones_to_zeroes(input, pos);

        let searched_bit = method(ones_to_zeros);
        //TRY IT!
    }

    1
}

fn count_ones_to_zeroes(input: &[&[u8]], pos: usize) -> i16 {
    let mut result = 0;
    for num in input {
        println!(r#"{num}"#);
        result = match num[pos] {
            1 => result + 1,
            0 => result - 1,
            _ => unreachable!(),
        };
    }
    result
}
